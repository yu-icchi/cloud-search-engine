/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. QueryParser.jj */
/*@egen*///---------------------------------------------------------
//QueryParser.jjt
//
//\u7e67\uff6f\u7e67\uff68\u7e5d\uff6a\u7e5d\uff7c\u7e67\u5b9a\uff67\uff63\u8b6b\u820c\uff20\u7e32\u2235\uff6d\uff63\u9695\u4e1e\u55a7\u7e3a\uff68\u7e67\uff7f\u7e5d\uff7c\u7e5d\ufffd\uff52\u8b1a\uff7d\u8703\uff7a\u7e67\u5075\u2606\u7e67\u4e5d\u25c6\u7e67\u221a\ufffdParser\u7e3a\uff67\u7e3a\u3085\uff4b
//---------------------------------------------------------

//\u7e67\uff6a\u7e5d\u52b1\u3059\u7e5d\uff67\u7e5d\uff73\u87b3\u5902\uff7e\uff69
options {
	STATIC=false;
	           
	             
	                                       
	UNICODE_INPUT=true;
	JAVA_UNICODE_ESCAPE=true;
}

//\u7e5d\u4ee3\ufffd\u7e67\uff75\u7e5d\uff7c\u7e67\uff6f\u7e5d\uff69\u7e67\uff79\u7e3a\uff6e\u87b3\u5902\uff7e\uff69
PARSER_BEGIN(QueryParser)
package location.query.parser;
public class QueryParser/*@bgen(jjtree)*/implements QueryParserTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected JJTQueryParserState jjtree = new JJTQueryParserState();

/*@egen*/

}
PARSER_END(QueryParser)

//\u7e5d\u533b\ufffd\u7e67\uff6f\u7e5d\uff73\u7e3a\uff6e\u87b3\u5902\uff7e\uff69
SKIP:
{
	"\r" | "\t" | "\n"
}

TOKEN:
{
		< WORD: (~[" ", "\u3000", "\r", "\t", "\n", "\"", "(", ")", "|", "-"])+ >
	|	< LP: "(" >
	|	< RP: ")" >
	|	< QUOTE: "\"" >
	|	< OP_AND: " AND " | " and " | (" ")+ | ("\u3000")+ >
	|	< OP_OR: " OR " | " or " | " | " >
	|	< OP_NOT: " NOT " | " not " | " -" >
}

//\u8b41\ufffd\uff73\u8f14\ufffd\u87b3\u5902\uff7e\uff69
ASTStart Start():
{/*@bgen(jjtree) Start */
  ASTStart jjtn000 = new ASTStart(JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Start */
        try {
/*@egen*/
	Query()/*@bgen(jjtree)*/
                {
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                }
/*@egen*/ { return jjtn000; }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Query()      :
{}
{
	Value() (
			And() Value()
		|	Or() Value()
		|	Not() Value() )*
}

void Value()      :
{}
{
	Word()
	|	Lp() Query() Rp()
}

void And():
{/*@bgen(jjtree) And */
  ASTAnd jjtn000 = new ASTAnd(JJTAND);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t; }
{/*@bgen(jjtree) And */
        try {
/*@egen*/
	t = <OP_AND>/*@bgen(jjtree)*/
                     {
                       jjtree.closeNodeScope(jjtn000, true);
                       jjtc000 = false;
                     }
/*@egen*/ { jjtn000.nodeValue = t.image; }/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Or():
{/*@bgen(jjtree) Or */
  ASTOr jjtn000 = new ASTOr(JJTOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t; }
{/*@bgen(jjtree) Or */
        try {
/*@egen*/
	t = <OP_OR>/*@bgen(jjtree)*/
                    {
                      jjtree.closeNodeScope(jjtn000, true);
                      jjtc000 = false;
                    }
/*@egen*/ { jjtn000.nodeValue = t.image; }/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Not():
{/*@bgen(jjtree) Not */
  ASTNot jjtn000 = new ASTNot(JJTNOT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t; }
{/*@bgen(jjtree) Not */
        try {
/*@egen*/
	t = <OP_NOT>/*@bgen(jjtree)*/
                     {
                       jjtree.closeNodeScope(jjtn000, true);
                       jjtc000 = false;
                     }
/*@egen*/ { jjtn000.nodeValue = t.image; }/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Lp():
{/*@bgen(jjtree) Lp */
  ASTLp jjtn000 = new ASTLp(JJTLP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t; }
{/*@bgen(jjtree) Lp */
        try {
/*@egen*/
	t = <LP>/*@bgen(jjtree)*/
                 {
                   jjtree.closeNodeScope(jjtn000, true);
                   jjtc000 = false;
                 }
/*@egen*/ { jjtn000.nodeValue = t.image; }/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Rp():
{/*@bgen(jjtree) Rp */
  ASTRp jjtn000 = new ASTRp(JJTRP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t; }
{/*@bgen(jjtree) Rp */
        try {
/*@egen*/
	t = <RP>/*@bgen(jjtree)*/
                 {
                   jjtree.closeNodeScope(jjtn000, true);
                   jjtc000 = false;
                 }
/*@egen*/ { jjtn000.nodeValue = t.image; }/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Word():
{/*@bgen(jjtree) Word */
  ASTWord jjtn000 = new ASTWord(JJTWORD);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t; }
{/*@bgen(jjtree) Word */
        try {
/*@egen*/
	t = <WORD>/*@bgen(jjtree)*/
                   {
                     jjtree.closeNodeScope(jjtn000, true);
                     jjtc000 = false;
                   }
/*@egen*/ { jjtn000.nodeValue = t.image; }/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}
