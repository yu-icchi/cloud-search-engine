/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. QbSSParser.jj */
/*@egen*///---------------------------------------------------------
//QbSS (Query based Server Selection)
//---------------------------------------------------------

//\u7e67\uff6a\u7e5d\u52b1\u3059\u7e5d\uff67\u7e5d\uff73\u87b3\u5902\uff7e\uff69
options {
	STATIC=false;
	           
	             
	                                      
	UNICODE_INPUT=true;
	JAVA_UNICODE_ESCAPE=true;
}

//\u7e5d\u4ee3\ufffd\u7e67\uff75\u7e5d\uff7c\u7e67\uff6f\u7e5d\uff69\u7e67\uff79\u7e3a\uff6e\u87b3\u5902\uff7e\uff69
PARSER_BEGIN(QbSSParser)
package location.qbss.parser;
public class QbSSParser/*@bgen(jjtree)*/implements QbSSParserTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected JJTQbSSParserState jjtree = new JJTQbSSParserState();

/*@egen*/

}
PARSER_END(QbSSParser)

//\u7e5d\u533b\ufffd\u7e67\uff6f\u7e5d\uff73\u7e3a\uff6e\u87b3\u5902\uff7e\uff69
SKIP:
{
	" " | "\u3000" | "\r" | "\t" | "\n"
}

TOKEN [IGNORE_CASE]:
{
		< OP_AND: "AND" >
	|	< OP_OR: "OR" >
	|	< OP_NOT: "NOT" >
}

TOKEN:
{
		< WORD: (~[" ", "\u3000" , "\r", "\t", "\n", "\"", "(", ")"])+ >
	|	< LP: "(" >
	|	< RP: ")" >
	|	< QUOTE: "\"" >
}

//\u8b41\ufffd\uff73\u8f14\ufffd\u87b3\u5902\uff7e\uff69
ASTStart Start():
{/*@bgen(jjtree) Start */
  ASTStart jjtn000 = new ASTStart(JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Start */
        try {
/*@egen*/
	Query()/*@bgen(jjtree)*/
                {
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                }
/*@egen*/ { return jjtn000; }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Query()      :
{}
{
	Value() (
			<OP_AND>/*@bgen(jjtree) #And( 2) */
                                 {
                                   ASTAnd jjtn001 = new ASTAnd(JJTAND);
                                   boolean jjtc001 = true;
                                   jjtree.openNodeScope(jjtn001);
                                 }
                                 try {
/*@egen*/ Value()/*@bgen(jjtree)*/
                                 } catch (Throwable jjte001) {
                                   if (jjtc001) {
                                     jjtree.clearNodeScope(jjtn001);
                                     jjtc001 = false;
                                   } else {
                                     jjtree.popNode();
                                   }
                                   if (jjte001 instanceof RuntimeException) {
                                     throw (RuntimeException)jjte001;
                                   }
                                   if (jjte001 instanceof ParseException) {
                                     throw (ParseException)jjte001;
                                   }
                                   throw (Error)jjte001;
                                 } finally {
                                   if (jjtc001) {
                                     jjtree.closeNodeScope(jjtn001,  2);
                                   }
                                 }
/*@egen*/        
		|	<OP_OR>/*@bgen(jjtree) #Or( 2) */
                                {
                                  ASTOr jjtn002 = new ASTOr(JJTOR);
                                  boolean jjtc002 = true;
                                  jjtree.openNodeScope(jjtn002);
                                }
                                try {
/*@egen*/ Value()/*@bgen(jjtree)*/
                                } catch (Throwable jjte002) {
                                  if (jjtc002) {
                                    jjtree.clearNodeScope(jjtn002);
                                    jjtc002 = false;
                                  } else {
                                    jjtree.popNode();
                                  }
                                  if (jjte002 instanceof RuntimeException) {
                                    throw (RuntimeException)jjte002;
                                  }
                                  if (jjte002 instanceof ParseException) {
                                    throw (ParseException)jjte002;
                                  }
                                  throw (Error)jjte002;
                                } finally {
                                  if (jjtc002) {
                                    jjtree.closeNodeScope(jjtn002,  2);
                                  }
                                }
/*@egen*/       
		|	<OP_NOT>/*@bgen(jjtree) #Not( 2) */
                                 {
                                   ASTNot jjtn003 = new ASTNot(JJTNOT);
                                   boolean jjtc003 = true;
                                   jjtree.openNodeScope(jjtn003);
                                 }
                                 try {
/*@egen*/ Value()/*@bgen(jjtree)*/
                                 } catch (Throwable jjte003) {
                                   if (jjtc003) {
                                     jjtree.clearNodeScope(jjtn003);
                                     jjtc003 = false;
                                   } else {
                                     jjtree.popNode();
                                   }
                                   if (jjte003 instanceof RuntimeException) {
                                     throw (RuntimeException)jjte003;
                                   }
                                   if (jjte003 instanceof ParseException) {
                                     throw (ParseException)jjte003;
                                   }
                                   throw (Error)jjte003;
                                 } finally {
                                   if (jjtc003) {
                                     jjtree.closeNodeScope(jjtn003,  2);
                                   }
                                 }
/*@egen*/         )*
}

void Value()      :
{}
{
		Word()
	|	<LP> Query() <RP>
}

void Word():
{/*@bgen(jjtree) Word */
  ASTWord jjtn000 = new ASTWord(JJTWORD);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t; }
{/*@bgen(jjtree) Word */
        try {
/*@egen*/
	t = <WORD>/*@bgen(jjtree)*/
                   {
                     jjtree.closeNodeScope(jjtn000, true);
                     jjtc000 = false;
                   }
/*@egen*/ { jjtn000.nodeValue = t.image; }/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}
